/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ControllerEtablissement;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;
import javax.swing.DefaultListModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import model.Classe;
import model.Eleve;
import model.Enseignant;

/**
 *
 * @author flemoal
 */
public class VueProviseur extends javax.swing.JFrame {

    private ControllerEtablissement ce;
    private DefaultListModel listeEleves, listeEnseignants;
    private MyTableModel tableEnseignants;

    /**
     * Creates new form VueProviseur
     */
    public VueProviseur(ControllerEtablissement ce) {
        this.ce = ce;
        this.listeEleves = new DefaultListModel();
        this.listeEnseignants = new DefaultListModel();
        this.tableEnseignants = new MyTableModel(this.ce.getEtablissement().getEnseignants(), this);

        initComponents();

        setLocationRelativeTo(null);
        this.jPanelListeEleves.setVisible(false);
        this.jPanelListeEnseigants.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeClasses = new javax.swing.JTree();
        jPanelInfos = new javax.swing.JPanel();
        jPanelListeEleves = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListEleves = new javax.swing.JList();
        jPanelListeEnseigants = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListEnseignants = new javax.swing.JList();
        jPanelEnseigants = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEnseignants = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jButtonDeleteEnseignant = new javax.swing.JButton();
        jButtonAddEnseignant = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFichier = new javax.swing.JMenu();
        jMenuItemDisconnect = new javax.swing.JMenuItem();
        jMenuItemQuit = new javax.swing.JMenuItem();
        jMenuClasse = new javax.swing.JMenu();
        jMenuItemAddClasse = new javax.swing.JMenuItem();
        jMenuItemAddEleve = new javax.swing.JMenuItem();
        jMenuItemAffecterE = new javax.swing.JMenuItem();
        jMenuEnseignants = new javax.swing.JMenu();
        jMenuItemAddEnseignant = new javax.swing.JMenuItem();
        jMenuItemDelEnseignant = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Gestion de l'établissement - Proviseur");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setResizeWeight(0.1);

        jTreeClasses.setModel(getTreeClasses());
        jTreeClasses.setRootVisible(false);
        jTreeClasses.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeClassesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeClasses);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanelInfos.setLayout(new java.awt.GridLayout(2, 1, 0, 10));

        jPanelListeEleves.setBorder(javax.swing.BorderFactory.createTitledBorder("Élèves"));
        jPanelListeEleves.setLayout(new java.awt.BorderLayout());

        jListEleves.setModel(listeEleves);
        jScrollPane3.setViewportView(jListEleves);

        jPanelListeEleves.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanelInfos.add(jPanelListeEleves);

        jPanelListeEnseigants.setBorder(javax.swing.BorderFactory.createTitledBorder("Enseignants"));
        jPanelListeEnseigants.setLayout(new java.awt.BorderLayout());

        jListEnseignants.setModel(listeEnseignants);
        jScrollPane4.setViewportView(jListEnseignants);

        jPanelListeEnseigants.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanelInfos.add(jPanelListeEnseigants);

        jSplitPane1.setRightComponent(jPanelInfos);

        jTabbedPane.addTab("Classes", jSplitPane1);

        jPanelEnseigants.setLayout(new java.awt.BorderLayout());

        jTableEnseignants.setModel(this.tableEnseignants);
        jScrollPane2.setViewportView(jTableEnseignants);

        jPanelEnseigants.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jButtonDeleteEnseignant.setText("Supprimer");
        jButtonDeleteEnseignant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteEnseignantActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonDeleteEnseignant);

        jButtonAddEnseignant.setText("Ajouter");
        jButtonAddEnseignant.setToolTipText("");
        jButtonAddEnseignant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddEnseignantActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonAddEnseignant);

        jPanelEnseigants.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jTabbedPane.addTab("Enseignants", jPanelEnseigants);

        jMenuFichier.setText("Fichier");

        jMenuItemDisconnect.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.META_MASK));
        jMenuItemDisconnect.setText("Déconnexion");
        jMenuItemDisconnect.setToolTipText("");
        jMenuItemDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDisconnectActionPerformed(evt);
            }
        });
        jMenuFichier.add(jMenuItemDisconnect);

        jMenuItemQuit.setText("Quitter");
        jMenuItemQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQuitActionPerformed(evt);
            }
        });
        jMenuFichier.add(jMenuItemQuit);

        jMenuBar.add(jMenuFichier);

        jMenuClasse.setText("Classe");
        jMenuClasse.setToolTipText("");

        jMenuItemAddClasse.setText("Ajouter une classe");
        jMenuItemAddClasse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddClasseActionPerformed(evt);
            }
        });
        jMenuClasse.add(jMenuItemAddClasse);

        jMenuItemAddEleve.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.META_MASK));
        jMenuItemAddEleve.setText("Ajouter un élève");
        jMenuItemAddEleve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddEleveActionPerformed(evt);
            }
        });
        jMenuClasse.add(jMenuItemAddEleve);

        jMenuItemAffecterE.setText("Affecter un enseignant");
        jMenuItemAffecterE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAffecterEActionPerformed(evt);
            }
        });
        jMenuClasse.add(jMenuItemAffecterE);

        jMenuBar.add(jMenuClasse);

        jMenuEnseignants.setText("Enseignants");

        jMenuItemAddEnseignant.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.META_MASK));
        jMenuItemAddEnseignant.setText("Ajouter un enseignant");
        jMenuItemAddEnseignant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddEnseignantActionPerformed(evt);
            }
        });
        jMenuEnseignants.add(jMenuItemAddEnseignant);

        jMenuItemDelEnseignant.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jMenuItemDelEnseignant.setText("Supprimer cet enseignant");
        jMenuItemDelEnseignant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDelEnseignantActionPerformed(evt);
            }
        });
        jMenuEnseignants.add(jMenuItemDelEnseignant);

        jMenuBar.add(jMenuEnseignants);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeClassesValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeClassesValueChanged
        this.refreshClasseInfos();
    }//GEN-LAST:event_jTreeClassesValueChanged

    private void jMenuItemAddClasseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddClasseActionPerformed
        new VueAddClasse(this, this.ce).setVisible(true);
    }//GEN-LAST:event_jMenuItemAddClasseActionPerformed

    private void jMenuItemAffecterEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAffecterEActionPerformed
        new VueAffectEnseignant(this, this.ce).setVisible(true);
    }//GEN-LAST:event_jMenuItemAffecterEActionPerformed

    private void jMenuItemQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQuitActionPerformed
        this.ce.quitApp(this);
    }//GEN-LAST:event_jMenuItemQuitActionPerformed

    private void jButtonDeleteEnseignantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteEnseignantActionPerformed
        this.deleteEnseignants();
    }//GEN-LAST:event_jButtonDeleteEnseignantActionPerformed

    private void jMenuItemAddEleveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddEleveActionPerformed
        new VueAddEleve(this, this.ce).setVisible(true);
    }//GEN-LAST:event_jMenuItemAddEleveActionPerformed

    private void jMenuItemAddEnseignantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddEnseignantActionPerformed
        this.addEnseignant();
    }//GEN-LAST:event_jMenuItemAddEnseignantActionPerformed

    private void jButtonAddEnseignantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddEnseignantActionPerformed
        this.addEnseignant();
    }//GEN-LAST:event_jButtonAddEnseignantActionPerformed

    private void jMenuItemDelEnseignantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDelEnseignantActionPerformed
        this.deleteEnseignants();
    }//GEN-LAST:event_jMenuItemDelEnseignantActionPerformed

    private void jMenuItemDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDisconnectActionPerformed
        this.ce.disconnect(this);
    }//GEN-LAST:event_jMenuItemDisconnectActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.ce.disconnect(this);
    }//GEN-LAST:event_formWindowClosing

    private TreeModel getTreeClasses() {
        // Racine de l'arbre
        DefaultMutableTreeNode treeRoot = new DefaultMutableTreeNode("Root");

        Classe cPrev = null;
        DefaultMutableTreeNode nodeClasse = null;

        // Parcours de toutes les classes de l'établissement
        for (Classe cCurr : this.ce.getEtablissement().getClasses()) {
            // Si on entre dans un nouveau niveau de classe alors faire
            // un nouveau niveau et inscrire l'ancien dans la racine
            if (cPrev == null || cCurr.getNiveau() != cPrev.getNiveau()) {
                if (nodeClasse != null) {
                    treeRoot.add(nodeClasse);
                }

                nodeClasse = new DefaultMutableTreeNode(cCurr.getNiveau().getName());
            }
            cPrev = cCurr;
            nodeClasse.add(new DefaultMutableTreeNode(cCurr));
        }

        if (nodeClasse != null) {
            treeRoot.add(nodeClasse);
        }

        return new DefaultTreeModel(treeRoot);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddEnseignant;
    private javax.swing.JButton jButtonDeleteEnseignant;
    private javax.swing.JList jListEleves;
    private javax.swing.JList jListEnseignants;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuClasse;
    private javax.swing.JMenu jMenuEnseignants;
    private javax.swing.JMenu jMenuFichier;
    private javax.swing.JMenuItem jMenuItemAddClasse;
    private javax.swing.JMenuItem jMenuItemAddEleve;
    private javax.swing.JMenuItem jMenuItemAddEnseignant;
    private javax.swing.JMenuItem jMenuItemAffecterE;
    private javax.swing.JMenuItem jMenuItemDelEnseignant;
    private javax.swing.JMenuItem jMenuItemDisconnect;
    private javax.swing.JMenuItem jMenuItemQuit;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelEnseigants;
    private javax.swing.JPanel jPanelInfos;
    private javax.swing.JPanel jPanelListeEleves;
    private javax.swing.JPanel jPanelListeEnseigants;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableEnseignants;
    private javax.swing.JTree jTreeClasses;
    // End of variables declaration//GEN-END:variables

    public void refreshClasseInfos() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTreeClasses.getLastSelectedPathComponent();
        if (node != null) {
            // Récupération de la classe
            Object nodeInfo = node.getUserObject();
            if (!(nodeInfo instanceof Classe)) {
                this.jPanelListeEleves.setVisible(false);
                this.jPanelListeEnseigants.setVisible(false);
                return;
            }

            Classe classe = (Classe) nodeInfo;

            // Effacement des listes
            this.listeEleves.clear();
            this.listeEnseignants.clear();

            // Remplissage de la liste des élèves
            for (Eleve e : classe.getEleves()) {
                this.listeEleves.addElement(e.toString());
            }

            // Remplissage de la liste des enseignants
            for (Enseignant e : classe.getEnseignants()) {
                // S'agissant d'un tableau il faut ignorer les éléments
                // manquants au cas où
                if (e == null) {
                    continue;
                }

                String text = e.toString();

                // Ajout du gras pour le professeur principal
                if (e.equals(classe.getProfesseurPrincipal())) {
                    text = "<html><b>" + text + "</b></html>";
                }

                this.listeEnseignants.addElement(text);
            }

            // Affichage des listes
            this.jPanelListeEleves.setVisible(true);
            this.jPanelListeEnseigants.setVisible(true);

        } else {
            this.jPanelListeEleves.setVisible(false);
            this.jPanelListeEnseigants.setVisible(false);
        }
    }

    public void refreshTreeClasses() {
        this.jTreeClasses.setModel(getTreeClasses());
    }

    private void deleteEnseignants() {
        List<Enseignant> le = new ArrayList<>();
        for (int i : jTableEnseignants.getSelectedRows()) {
            le.add((Enseignant) this.ce.getEtablissement().getEnseignants().toArray()[i]);
        }

//        this.ce.getEtablissement().getEnseignants().removeAll(le);
        this.ce.deleteEnseignants(le);
    }

    private void addEnseignant() {
        new VueAddEnseignant(this, this.ce).setVisible(true);
    }

    public void refreshTableEnseignants() {
        this.tableEnseignants.refresh();
    }

    class MyTableModel extends AbstractTableModel {

        private VueProviseur vp;
        private TreeSet<Enseignant> enseignants;
        private String[] columnNames = {"Nom", "Prénom", "Matière"};

        public MyTableModel(TreeSet<Enseignant> enseignants, VueProviseur vp) {
            this.enseignants = enseignants;
            this.vp = vp;
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public int getRowCount() {
            return enseignants.size();
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            Enseignant e = (Enseignant) enseignants.toArray()[row];
            switch (col) {
                case 0:
                    return e.getNom();
                case 1:
                    return e.getPrenom();
                case 2:
                    return e.getMatiere();
                default:
                    return null;
            }
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        @Override
        public boolean isCellEditable(int row, int col) {
//            if (col < 2) {
//                return true;
//            } else {
//                return false;
//            }
            return col < 2;
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            Enseignant e = (Enseignant) enseignants.toArray()[row];
            switch (col) {
                case 0:
                    if (value instanceof String) {
                        e.setNom((String) value);
                    }
                    break;
                case 1:
                    if (value instanceof String) {
                        e.setPrenom((String) value);
                    }
                    break;
            }

            this.vp.refreshClasseInfos();
        }

        public void refresh() {
            fireTableDataChanged();
        }
    }
}
